
example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000ef6  00000f8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  00800102  00800102  00000f8c  2**0
                  ALLOC
  3 .debug_aranges 000000d8  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000016c  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c5e  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000478  00000000  00000000  00001e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001090  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00003338  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  00003468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f7d  00000000  00000000  0000381b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00004798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}


// immediately transmit any buffered output.
void usb_debug_flush_output(void)
{
   0:	05 c1       	rjmp	.+522    	; 0x20c <__ctors_end>
   2:	00 00       	nop
   4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
   6:	00 00       	nop
   8:	1e c1       	rjmp	.+572    	; 0x246 <__bad_interrupt>
   a:	00 00       	nop
   c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
   e:	00 00       	nop
  10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
  12:	00 00       	nop
  14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
  16:	00 00       	nop
  18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
  1e:	00 00       	nop
  20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
  22:	00 00       	nop
  24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
  26:	00 00       	nop
  28:	02 c5       	rjmp	.+2564   	; 0xa2e <__vector_10>
  2a:	00 00       	nop
  2c:	4e c5       	rjmp	.+2716   	; 0xaca <__vector_11>
  2e:	00 00       	nop
  30:	0a c1       	rjmp	.+532    	; 0x246 <__bad_interrupt>
  32:	00 00       	nop
  34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
  36:	00 00       	nop
  38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
  3e:	00 00       	nop
  40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
  42:	00 00       	nop
  44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
  46:	00 00       	nop
  48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
  4e:	00 00       	nop
  50:	fa c0       	rjmp	.+500    	; 0x246 <__bad_interrupt>
  52:	00 00       	nop
  54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
  56:	00 00       	nop
  58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f5 c0       	rjmp	.+490    	; 0x248 <__vector_23>
  5e:	00 00       	nop
  60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
  62:	00 00       	nop
  64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
  66:	00 00       	nop
  68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
  6e:	00 00       	nop
  70:	ea c0       	rjmp	.+468    	; 0x246 <__bad_interrupt>
  72:	00 00       	nop
  74:	e8 c0       	rjmp	.+464    	; 0x246 <__bad_interrupt>
  76:	00 00       	nop
  78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
  82:	00 00       	nop
  84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
  86:	00 00       	nop
  88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
  8e:	00 00       	nop
  90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
  92:	00 00       	nop
  94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__c.1406>:
  98:	0a 00                                               ..

0000009a <__c.1404>:
  9a:	2c 20 72 3d 00                                      , r=.

0000009f <__c.1402>:
  9f:	74 72 61 6e 73 6d 69 74 20 70 61 63 6b 65 74 20     transmit packet 
  af:	00                                                  .

000000b0 <__c.1394>:
  b0:	0a 00                                               ..

000000b2 <__c.1392>:
  b2:	72 65 63 65 69 76 65 20 70 61 63 6b 65 74 2c 20     receive packet, 
  c2:	62 75 66 66 65 72 5b 30 5d 3d 00                    buffer[0]=.

000000cd <__c.1390>:
  cd:	42 65 67 69 6e 20 72 61 77 68 69 64 20 65 78 61     Begin rawhid exa
  dd:	6d 70 6c 65 20 70 72 6f 67 72 61 6d 0a 00           mple program..

000000eb <descriptor_list>:
  eb:	00 01 00 00 34 01 12 00 02 00 00 46 01 42 00 22     ....4......F.B."
  fb:	00 00 88 01 1c 00 21 00 00 58 01 09 00 22 01 00     ......!..X..."..
 10b:	a4 01 15 00 21 01 00 78 01 09 00 03 00 00 b9 01     ....!..x........
 11b:	04 01 03 09 04 bd 01 10 02 03 09 04 cf 01 2e        ...............

0000012a <endpoint_config_table>:
 12a:	01 c1 36 01 c0 36 01 c1 26 00                       ..6..6..&.

00000134 <device_descriptor>:
 134:	12 01 00 02 00 00 00 10 c0 16 80 04 00 01 01 02     ................
 144:	00 01                                               ..

00000146 <config1_descriptor>:
 146:	09 02 42 00 02 01 00 c0 32 09 04 00 00 02 03 00     ..B.....2.......
 156:	00 00 09 21 11 01 00 01 22 1c 00 07 05 81 03 40     ...!...."......@
 166:	00 02 07 05 02 03 40 00 08 09 04 01 00 01 03 00     ......@.........
 176:	00 00 09 21 11 01 00 01 22 15 00 07 05 83 03 20     ...!...."...... 
 186:	00 01                                               ..

00000188 <rawhid_hid_report_desc>:
 188:	06 ab ff 0a 00 02 a1 01 75 08 15 00 26 ff 00 95     ........u...&...
 198:	40 09 01 81 02 95 40 09 02 91 02 c0                 @.....@.....

000001a4 <debug_hid_report_desc>:
 1a4:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 1b4:	09 75 81 02 c0                                      .u...

000001b9 <string0>:
 1b9:	04 03 09 04                                         ....

000001bd <string1>:
 1bd:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
 1cd:	00 00                                               ..

000001cf <string2>:
 1cf:	2e 03 54 00 65 00 65 00 6e 00 73 00 79 00 20 00     ..T.e.e.n.s.y. .
 1df:	52 00 61 00 77 00 20 00 48 00 49 00 44 00 20 00     R.a.w. .H.I.D. .
 1ef:	45 00 78 00 61 00 6d 00 70 00 6c 00 65 00 00 00     E.x.a.m.p.l.e...

000001ff <adc_mapping>:
 1ff:	00 01 04 05 06 07 0d 0c 0b 0a 09 08 00              .............

0000020c <__ctors_end>:
 20c:	11 24       	eor	r1, r1
 20e:	1f be       	out	0x3f, r1	; 63
 210:	cf ef       	ldi	r28, 0xFF	; 255
 212:	d0 e2       	ldi	r29, 0x20	; 32
 214:	de bf       	out	0x3e, r29	; 62
 216:	cd bf       	out	0x3d, r28	; 61

00000218 <__do_copy_data>:
 218:	11 e0       	ldi	r17, 0x01	; 1
 21a:	a0 e0       	ldi	r26, 0x00	; 0
 21c:	b1 e0       	ldi	r27, 0x01	; 1
 21e:	e6 ef       	ldi	r30, 0xF6	; 246
 220:	fe e0       	ldi	r31, 0x0E	; 14
 222:	00 e0       	ldi	r16, 0x00	; 0
 224:	0b bf       	out	0x3b, r16	; 59
 226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
 228:	07 90       	elpm	r0, Z+
 22a:	0d 92       	st	X+, r0
 22c:	a2 30       	cpi	r26, 0x02	; 2
 22e:	b1 07       	cpc	r27, r17
 230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>

00000232 <__do_clear_bss>:
 232:	11 e0       	ldi	r17, 0x01	; 1
 234:	a2 e0       	ldi	r26, 0x02	; 2
 236:	b1 e0       	ldi	r27, 0x01	; 1
 238:	01 c0       	rjmp	.+2      	; 0x23c <.do_clear_bss_start>

0000023a <.do_clear_bss_loop>:
 23a:	1d 92       	st	X+, r1

0000023c <.do_clear_bss_start>:
 23c:	a9 34       	cpi	r26, 0x49	; 73
 23e:	b1 07       	cpc	r27, r17
 240:	e1 f7       	brne	.-8      	; 0x23a <.do_clear_bss_loop>
 242:	1a d0       	rcall	.+52     	; 0x278 <main>
 244:	56 c6       	rjmp	.+3244   	; 0xef2 <_exit>

00000246 <__bad_interrupt>:
 246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <__vector_23>:
	}
}

// This interrupt routine is run approx 61 times per second.
ISR(TIMER0_OVF_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	8f 93       	push	r24
	static uint8_t count=0;

	// set the do_output variable every 2 seconds
	if (++count > 122) {
 254:	80 91 03 01 	lds	r24, 0x0103
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	80 93 03 01 	sts	0x0103, r24
 25e:	8b 37       	cpi	r24, 0x7B	; 123
 260:	28 f0       	brcs	.+10     	; 0x26c <__vector_23+0x24>
		count = 0;
 262:	10 92 03 01 	sts	0x0103, r1
		do_output = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 02 01 	sts	0x0102, r24
	}
}
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <main>:

volatile uint8_t do_output=0;
uint8_t buffer[64];

int main(void)
{
 278:	bf 92       	push	r11
 27a:	cf 92       	push	r12
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	int8_t r;
	uint8_t i;
	uint16_t val, count=0;

	// set for 16 MHz clock
	CPU_PRESCALE(0);
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	80 93 61 00 	sts	0x0061, r24
 290:	10 92 61 00 	sts	0x0061, r1

	// Initialize the USB, and then wait for the host to set configuration.
	// If the Teensy is powered without a PC connected to the USB port,
	// this will wait forever.
	usb_init();
 294:	68 d0       	rcall	.+208    	; 0x366 <usb_init>
	while (!usb_configured()) /* wait */ ;
 296:	7e d0       	rcall	.+252    	; 0x394 <usb_configured>
 298:	88 23       	and	r24, r24
 29a:	e9 f3       	breq	.-6      	; 0x296 <main+0x1e>
 29c:	80 e1       	ldi	r24, 0x10	; 16
 29e:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2a0:	20 e9       	ldi	r18, 0x90	; 144
 2a2:	31 e0       	ldi	r19, 0x01	; 1
 2a4:	f9 01       	movw	r30, r18
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ac:	d9 f7       	brne	.-10     	; 0x2a4 <main+0x2c>
	// and do whatever it does to actually be ready for input
	_delay_ms(1000);

        // Configure timer 0 to generate a timer overflow interrupt every
        // 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
        TCCR0A = 0x00;
 2ae:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0x05;
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	85 bd       	out	0x25, r24	; 37
        TIMSK0 = (1<<TOIE0);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 6e 00 	sts	0x006E, r24

	print("Begin rawhid example program\n");
 2ba:	8d ec       	ldi	r24, 0xCD	; 205
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	05 d6       	rcall	.+3082   	; 0xeca <print_P>
 2c0:	ee 24       	eor	r14, r14
 2c2:	ff 24       	eor	r15, r15
	while (1) {
		// if received data, do something with it
		r = usb_rawhid_recv(buffer, 0);
		if (r > 0) {
			// output 4 bits to D0, D1, D2, D3 pins
			DDRD = 0x0F;
 2c4:	2f e0       	ldi	r18, 0x0F	; 15
 2c6:	b2 2e       	mov	r11, r18
		}
		// if time to send output, transmit something interesting
		if (do_output) {
			do_output = 0;
			// send a packet, first 2 bytes 0xABCD
			buffer[0] = 0xAB;
 2c8:	9b ea       	ldi	r25, 0xAB	; 171
 2ca:	c9 2e       	mov	r12, r25
			buffer[1] = 0xCD;
 2cc:	8d ec       	ldi	r24, 0xCD	; 205
 2ce:	d8 2e       	mov	r13, r24
        TIMSK0 = (1<<TOIE0);

	print("Begin rawhid example program\n");
	while (1) {
		// if received data, do something with it
		r = usb_rawhid_recv(buffer, 0);
 2d0:	89 e0       	ldi	r24, 0x09	; 9
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	61 d0       	rcall	.+194    	; 0x39a <usb_rawhid_recv>
 2d8:	08 2f       	mov	r16, r24
		if (r > 0) {
 2da:	18 16       	cp	r1, r24
 2dc:	8c f4       	brge	.+34     	; 0x300 <main+0x88>
			// output 4 bits to D0, D1, D2, D3 pins
			DDRD = 0x0F;
 2de:	ba b8       	out	0x0a, r11	; 10
			PORTD = (PORTD & 0xF0) | (buffer[0] & 0x0F);
 2e0:	9b b1       	in	r25, 0x0b	; 11
 2e2:	80 91 09 01 	lds	r24, 0x0109
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	90 7f       	andi	r25, 0xF0	; 240
 2ea:	89 2b       	or	r24, r25
 2ec:	8b b9       	out	0x0b, r24	; 11
			// ignore the other 63.5 bytes....
			print("receive packet, buffer[0]=");
 2ee:	82 eb       	ldi	r24, 0xB2	; 178
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	eb d5       	rcall	.+3030   	; 0xeca <print_P>
			phex(buffer[0]);
 2f4:	80 91 09 01 	lds	r24, 0x0109
 2f8:	d6 d5       	rcall	.+2988   	; 0xea6 <phex>
			print("\n");
 2fa:	80 eb       	ldi	r24, 0xB0	; 176
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	e5 d5       	rcall	.+3018   	; 0xeca <print_P>
		}
		// if time to send output, transmit something interesting
		if (do_output) {
 300:	80 91 02 01 	lds	r24, 0x0102
 304:	88 23       	and	r24, r24
 306:	21 f3       	breq	.-56     	; 0x2d0 <main+0x58>
			do_output = 0;
 308:	10 92 02 01 	sts	0x0102, r1
			// send a packet, first 2 bytes 0xABCD
			buffer[0] = 0xAB;
 30c:	c0 92 09 01 	sts	0x0109, r12
			buffer[1] = 0xCD;
 310:	d0 92 0a 01 	sts	0x010A, r13
 314:	cb e0       	ldi	r28, 0x0B	; 11
 316:	d1 e0       	ldi	r29, 0x01	; 1
 318:	10 e0       	ldi	r17, 0x00	; 0
 			// put A/D measurements into next 24 bytes
			for (i=0; i<12; i++) {
				val = analogRead(i);
 31a:	81 2f       	mov	r24, r17
 31c:	77 d5       	rcall	.+2798   	; 0xe0c <analogRead>
				buffer[i * 2 + 2] = val >> 8;
 31e:	98 83       	st	Y, r25
				buffer[i * 2 + 3] = val & 255;
 320:	89 83       	std	Y+1, r24	; 0x01
			do_output = 0;
			// send a packet, first 2 bytes 0xABCD
			buffer[0] = 0xAB;
			buffer[1] = 0xCD;
 			// put A/D measurements into next 24 bytes
			for (i=0; i<12; i++) {
 322:	1f 5f       	subi	r17, 0xFF	; 255
 324:	22 96       	adiw	r28, 0x02	; 2
 326:	1c 30       	cpi	r17, 0x0C	; 12
 328:	c1 f7       	brne	.-16     	; 0x31a <main+0xa2>
 32a:	e3 e2       	ldi	r30, 0x23	; 35
 32c:	f1 e0       	ldi	r31, 0x01	; 1
				buffer[i * 2 + 2] = val >> 8;
				buffer[i * 2 + 3] = val & 255;
			}
			// most of the packet filled with zero
			for (i=26; i<62; i++) {
				buffer[i] = 0;
 32e:	11 92       	st	Z+, r1
				val = analogRead(i);
				buffer[i * 2 + 2] = val >> 8;
				buffer[i * 2 + 3] = val & 255;
			}
			// most of the packet filled with zero
			for (i=26; i<62; i++) {
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	e7 34       	cpi	r30, 0x47	; 71
 334:	f8 07       	cpc	r31, r24
 336:	d9 f7       	brne	.-10     	; 0x32e <main+0xb6>
				buffer[i] = 0;
			}
			// put a count in the last 2 bytes
			buffer[62] = count >> 8;
 338:	f0 82       	st	Z, r15
			buffer[63] = count & 255;
 33a:	e1 82       	std	Z+1, r14	; 0x01
			// send the packet
			usb_rawhid_send(buffer, 50);
 33c:	cf 01       	movw	r24, r30
 33e:	ce 97       	sbiw	r24, 0x3e	; 62
 340:	62 e3       	ldi	r22, 0x32	; 50
 342:	ad d1       	rcall	.+858    	; 0x69e <usb_rawhid_send>
			print("transmit packet ");
 344:	8f e9       	ldi	r24, 0x9F	; 159
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	c0 d5       	rcall	.+2944   	; 0xeca <print_P>
			phex16(count);
 34a:	c7 01       	movw	r24, r14
 34c:	b6 d5       	rcall	.+2924   	; 0xeba <phex16>
			print(", r=");
 34e:	8a e9       	ldi	r24, 0x9A	; 154
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	bb d5       	rcall	.+2934   	; 0xeca <print_P>
			phex(r);
 354:	80 2f       	mov	r24, r16
 356:	a7 d5       	rcall	.+2894   	; 0xea6 <phex>
			print("\n");
 358:	88 e9       	ldi	r24, 0x98	; 152
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	b6 d5       	rcall	.+2924   	; 0xeca <print_P>
			count++;
 35e:	08 94       	sec
 360:	e1 1c       	adc	r14, r1
 362:	f1 1c       	adc	r15, r1
 364:	b5 cf       	rjmp	.-150    	; 0x2d0 <main+0x58>

00000366 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 366:	81 e8       	ldi	r24, 0x81	; 129
 368:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 36c:	80 ea       	ldi	r24, 0xA0	; 160
 36e:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 372:	86 e1       	ldi	r24, 0x16	; 22
 374:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 376:	09 b4       	in	r0, 0x29	; 41
 378:	00 fe       	sbrs	r0, 0
 37a:	fd cf       	rjmp	.-6      	; 0x376 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 37c:	80 e9       	ldi	r24, 0x90	; 144
 37e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 382:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 386:	10 92 04 01 	sts	0x0104, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 38a:	8c e0       	ldi	r24, 0x0C	; 12
 38c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 390:	78 94       	sei
}
 392:	08 95       	ret

00000394 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 394:	80 91 04 01 	lds	r24, 0x0104
}
 398:	08 95       	ret

0000039a <usb_rawhid_recv>:


// receive a packet, with timeout
int8_t usb_rawhid_recv(uint8_t *buffer, uint8_t timeout)
{
 39a:	dc 01       	movw	r26, r24
	uint8_t intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 39c:	80 91 04 01 	lds	r24, 0x0104
 3a0:	88 23       	and	r24, r24
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <usb_rawhid_recv+0xc>
 3a4:	7a c1       	rjmp	.+756    	; 0x69a <usb_rawhid_recv+0x300>
	intr_state = SREG;
 3a6:	2f b7       	in	r18, 0x3f	; 63
	cli();
 3a8:	f8 94       	cli
	rx_timeout_count = timeout;
 3aa:	60 93 06 01 	sts	0x0106, r22
	UENUM = RAWHID_RX_ENDPOINT;
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	80 93 e9 00 	sts	0x00E9, r24
		SREG = intr_state;
		if (rx_timeout_count == 0) return 0;
		if (!usb_configuration) return -1;
		intr_state = SREG;
		cli();
		UENUM = RAWHID_RX_ENDPOINT;
 3b4:	92 e0       	ldi	r25, 0x02	; 2
	cli();
	rx_timeout_count = timeout;
	UENUM = RAWHID_RX_ENDPOINT;
	// wait for data to be available in the FIFO
	while (1) {
		if (UEINTX & (1<<RWAL)) break;
 3b6:	80 91 e8 00 	lds	r24, 0x00E8
 3ba:	85 fd       	sbrc	r24, 5
 3bc:	10 c0       	rjmp	.+32     	; 0x3de <usb_rawhid_recv+0x44>
		SREG = intr_state;
 3be:	2f bf       	out	0x3f, r18	; 63
		if (rx_timeout_count == 0) return 0;
 3c0:	80 91 06 01 	lds	r24, 0x0106
 3c4:	88 23       	and	r24, r24
 3c6:	09 f4       	brne	.+2      	; 0x3ca <usb_rawhid_recv+0x30>
 3c8:	69 c1       	rjmp	.+722    	; 0x69c <usb_rawhid_recv+0x302>
		if (!usb_configuration) return -1;
 3ca:	80 91 04 01 	lds	r24, 0x0104
 3ce:	88 23       	and	r24, r24
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <usb_rawhid_recv+0x3a>
 3d2:	63 c1       	rjmp	.+710    	; 0x69a <usb_rawhid_recv+0x300>
		intr_state = SREG;
 3d4:	2f b7       	in	r18, 0x3f	; 63
		cli();
 3d6:	f8 94       	cli
		UENUM = RAWHID_RX_ENDPOINT;
 3d8:	90 93 e9 00 	sts	0x00E9, r25
 3dc:	ec cf       	rjmp	.-40     	; 0x3b6 <usb_rawhid_recv+0x1c>
	}
	// read bytes from the FIFO
	#if (RAWHID_RX_SIZE >= 64)
	*buffer++ = UEDATX;
 3de:	80 91 f1 00 	lds	r24, 0x00F1
 3e2:	fd 01       	movw	r30, r26
 3e4:	81 93       	st	Z+, r24
	#endif
	#if (RAWHID_RX_SIZE >= 63)
	*buffer++ = UEDATX;
 3e6:	80 91 f1 00 	lds	r24, 0x00F1
 3ea:	11 96       	adiw	r26, 0x01	; 1
 3ec:	8c 93       	st	X, r24
 3ee:	df 01       	movw	r26, r30
 3f0:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 62)
	*buffer++ = UEDATX;
 3f2:	80 91 f1 00 	lds	r24, 0x00F1
 3f6:	81 83       	std	Z+1, r24	; 0x01
 3f8:	fd 01       	movw	r30, r26
 3fa:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 61)
	*buffer++ = UEDATX;
 3fc:	80 91 f1 00 	lds	r24, 0x00F1
 400:	11 96       	adiw	r26, 0x01	; 1
 402:	8c 93       	st	X, r24
 404:	df 01       	movw	r26, r30
 406:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 60)
	*buffer++ = UEDATX;
 408:	80 91 f1 00 	lds	r24, 0x00F1
 40c:	81 83       	std	Z+1, r24	; 0x01
 40e:	fd 01       	movw	r30, r26
 410:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 59)
	*buffer++ = UEDATX;
 412:	80 91 f1 00 	lds	r24, 0x00F1
 416:	11 96       	adiw	r26, 0x01	; 1
 418:	8c 93       	st	X, r24
 41a:	df 01       	movw	r26, r30
 41c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 58)
	*buffer++ = UEDATX;
 41e:	80 91 f1 00 	lds	r24, 0x00F1
 422:	81 83       	std	Z+1, r24	; 0x01
 424:	fd 01       	movw	r30, r26
 426:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 57)
	*buffer++ = UEDATX;
 428:	80 91 f1 00 	lds	r24, 0x00F1
 42c:	11 96       	adiw	r26, 0x01	; 1
 42e:	8c 93       	st	X, r24
 430:	df 01       	movw	r26, r30
 432:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 56)
	*buffer++ = UEDATX;
 434:	80 91 f1 00 	lds	r24, 0x00F1
 438:	81 83       	std	Z+1, r24	; 0x01
 43a:	fd 01       	movw	r30, r26
 43c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 55)
	*buffer++ = UEDATX;
 43e:	80 91 f1 00 	lds	r24, 0x00F1
 442:	11 96       	adiw	r26, 0x01	; 1
 444:	8c 93       	st	X, r24
 446:	df 01       	movw	r26, r30
 448:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 54)
	*buffer++ = UEDATX;
 44a:	80 91 f1 00 	lds	r24, 0x00F1
 44e:	81 83       	std	Z+1, r24	; 0x01
 450:	fd 01       	movw	r30, r26
 452:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 53)
	*buffer++ = UEDATX;
 454:	80 91 f1 00 	lds	r24, 0x00F1
 458:	11 96       	adiw	r26, 0x01	; 1
 45a:	8c 93       	st	X, r24
 45c:	df 01       	movw	r26, r30
 45e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 52)
	*buffer++ = UEDATX;
 460:	80 91 f1 00 	lds	r24, 0x00F1
 464:	81 83       	std	Z+1, r24	; 0x01
 466:	fd 01       	movw	r30, r26
 468:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 51)
	*buffer++ = UEDATX;
 46a:	80 91 f1 00 	lds	r24, 0x00F1
 46e:	11 96       	adiw	r26, 0x01	; 1
 470:	8c 93       	st	X, r24
 472:	df 01       	movw	r26, r30
 474:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 50)
	*buffer++ = UEDATX;
 476:	80 91 f1 00 	lds	r24, 0x00F1
 47a:	81 83       	std	Z+1, r24	; 0x01
 47c:	fd 01       	movw	r30, r26
 47e:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 49)
	*buffer++ = UEDATX;
 480:	80 91 f1 00 	lds	r24, 0x00F1
 484:	11 96       	adiw	r26, 0x01	; 1
 486:	8c 93       	st	X, r24
 488:	df 01       	movw	r26, r30
 48a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 48)
	*buffer++ = UEDATX;
 48c:	80 91 f1 00 	lds	r24, 0x00F1
 490:	81 83       	std	Z+1, r24	; 0x01
 492:	fd 01       	movw	r30, r26
 494:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 47)
	*buffer++ = UEDATX;
 496:	80 91 f1 00 	lds	r24, 0x00F1
 49a:	11 96       	adiw	r26, 0x01	; 1
 49c:	8c 93       	st	X, r24
 49e:	df 01       	movw	r26, r30
 4a0:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 46)
	*buffer++ = UEDATX;
 4a2:	80 91 f1 00 	lds	r24, 0x00F1
 4a6:	81 83       	std	Z+1, r24	; 0x01
 4a8:	fd 01       	movw	r30, r26
 4aa:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 45)
	*buffer++ = UEDATX;
 4ac:	80 91 f1 00 	lds	r24, 0x00F1
 4b0:	11 96       	adiw	r26, 0x01	; 1
 4b2:	8c 93       	st	X, r24
 4b4:	df 01       	movw	r26, r30
 4b6:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 44)
	*buffer++ = UEDATX;
 4b8:	80 91 f1 00 	lds	r24, 0x00F1
 4bc:	81 83       	std	Z+1, r24	; 0x01
 4be:	fd 01       	movw	r30, r26
 4c0:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 43)
	*buffer++ = UEDATX;
 4c2:	80 91 f1 00 	lds	r24, 0x00F1
 4c6:	11 96       	adiw	r26, 0x01	; 1
 4c8:	8c 93       	st	X, r24
 4ca:	df 01       	movw	r26, r30
 4cc:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 42)
	*buffer++ = UEDATX;
 4ce:	80 91 f1 00 	lds	r24, 0x00F1
 4d2:	81 83       	std	Z+1, r24	; 0x01
 4d4:	fd 01       	movw	r30, r26
 4d6:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 41)
	*buffer++ = UEDATX;
 4d8:	80 91 f1 00 	lds	r24, 0x00F1
 4dc:	11 96       	adiw	r26, 0x01	; 1
 4de:	8c 93       	st	X, r24
 4e0:	df 01       	movw	r26, r30
 4e2:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 40)
	*buffer++ = UEDATX;
 4e4:	80 91 f1 00 	lds	r24, 0x00F1
 4e8:	81 83       	std	Z+1, r24	; 0x01
 4ea:	fd 01       	movw	r30, r26
 4ec:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 39)
	*buffer++ = UEDATX;
 4ee:	80 91 f1 00 	lds	r24, 0x00F1
 4f2:	11 96       	adiw	r26, 0x01	; 1
 4f4:	8c 93       	st	X, r24
 4f6:	df 01       	movw	r26, r30
 4f8:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 38)
	*buffer++ = UEDATX;
 4fa:	80 91 f1 00 	lds	r24, 0x00F1
 4fe:	81 83       	std	Z+1, r24	; 0x01
 500:	fd 01       	movw	r30, r26
 502:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 37)
	*buffer++ = UEDATX;
 504:	80 91 f1 00 	lds	r24, 0x00F1
 508:	11 96       	adiw	r26, 0x01	; 1
 50a:	8c 93       	st	X, r24
 50c:	df 01       	movw	r26, r30
 50e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 36)
	*buffer++ = UEDATX;
 510:	80 91 f1 00 	lds	r24, 0x00F1
 514:	81 83       	std	Z+1, r24	; 0x01
 516:	fd 01       	movw	r30, r26
 518:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 35)
	*buffer++ = UEDATX;
 51a:	80 91 f1 00 	lds	r24, 0x00F1
 51e:	11 96       	adiw	r26, 0x01	; 1
 520:	8c 93       	st	X, r24
 522:	df 01       	movw	r26, r30
 524:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 34)
	*buffer++ = UEDATX;
 526:	80 91 f1 00 	lds	r24, 0x00F1
 52a:	81 83       	std	Z+1, r24	; 0x01
 52c:	fd 01       	movw	r30, r26
 52e:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 33)
	*buffer++ = UEDATX;
 530:	80 91 f1 00 	lds	r24, 0x00F1
 534:	11 96       	adiw	r26, 0x01	; 1
 536:	8c 93       	st	X, r24
 538:	df 01       	movw	r26, r30
 53a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 32)
	*buffer++ = UEDATX;
 53c:	80 91 f1 00 	lds	r24, 0x00F1
 540:	81 83       	std	Z+1, r24	; 0x01
 542:	fd 01       	movw	r30, r26
 544:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 31)
	*buffer++ = UEDATX;
 546:	80 91 f1 00 	lds	r24, 0x00F1
 54a:	11 96       	adiw	r26, 0x01	; 1
 54c:	8c 93       	st	X, r24
 54e:	df 01       	movw	r26, r30
 550:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 30)
	*buffer++ = UEDATX;
 552:	80 91 f1 00 	lds	r24, 0x00F1
 556:	81 83       	std	Z+1, r24	; 0x01
 558:	fd 01       	movw	r30, r26
 55a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 29)
	*buffer++ = UEDATX;
 55c:	80 91 f1 00 	lds	r24, 0x00F1
 560:	11 96       	adiw	r26, 0x01	; 1
 562:	8c 93       	st	X, r24
 564:	df 01       	movw	r26, r30
 566:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 28)
	*buffer++ = UEDATX;
 568:	80 91 f1 00 	lds	r24, 0x00F1
 56c:	81 83       	std	Z+1, r24	; 0x01
 56e:	fd 01       	movw	r30, r26
 570:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 27)
	*buffer++ = UEDATX;
 572:	80 91 f1 00 	lds	r24, 0x00F1
 576:	11 96       	adiw	r26, 0x01	; 1
 578:	8c 93       	st	X, r24
 57a:	df 01       	movw	r26, r30
 57c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 26)
	*buffer++ = UEDATX;
 57e:	80 91 f1 00 	lds	r24, 0x00F1
 582:	81 83       	std	Z+1, r24	; 0x01
 584:	fd 01       	movw	r30, r26
 586:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 25)
	*buffer++ = UEDATX;
 588:	80 91 f1 00 	lds	r24, 0x00F1
 58c:	11 96       	adiw	r26, 0x01	; 1
 58e:	8c 93       	st	X, r24
 590:	df 01       	movw	r26, r30
 592:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 24)
	*buffer++ = UEDATX;
 594:	80 91 f1 00 	lds	r24, 0x00F1
 598:	81 83       	std	Z+1, r24	; 0x01
 59a:	fd 01       	movw	r30, r26
 59c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 23)
	*buffer++ = UEDATX;
 59e:	80 91 f1 00 	lds	r24, 0x00F1
 5a2:	11 96       	adiw	r26, 0x01	; 1
 5a4:	8c 93       	st	X, r24
 5a6:	df 01       	movw	r26, r30
 5a8:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 22)
	*buffer++ = UEDATX;
 5aa:	80 91 f1 00 	lds	r24, 0x00F1
 5ae:	81 83       	std	Z+1, r24	; 0x01
 5b0:	fd 01       	movw	r30, r26
 5b2:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 21)
	*buffer++ = UEDATX;
 5b4:	80 91 f1 00 	lds	r24, 0x00F1
 5b8:	11 96       	adiw	r26, 0x01	; 1
 5ba:	8c 93       	st	X, r24
 5bc:	df 01       	movw	r26, r30
 5be:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 20)
	*buffer++ = UEDATX;
 5c0:	80 91 f1 00 	lds	r24, 0x00F1
 5c4:	81 83       	std	Z+1, r24	; 0x01
 5c6:	fd 01       	movw	r30, r26
 5c8:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 19)
	*buffer++ = UEDATX;
 5ca:	80 91 f1 00 	lds	r24, 0x00F1
 5ce:	11 96       	adiw	r26, 0x01	; 1
 5d0:	8c 93       	st	X, r24
 5d2:	df 01       	movw	r26, r30
 5d4:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 18)
	*buffer++ = UEDATX;
 5d6:	80 91 f1 00 	lds	r24, 0x00F1
 5da:	81 83       	std	Z+1, r24	; 0x01
 5dc:	fd 01       	movw	r30, r26
 5de:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 17)
	*buffer++ = UEDATX;
 5e0:	80 91 f1 00 	lds	r24, 0x00F1
 5e4:	11 96       	adiw	r26, 0x01	; 1
 5e6:	8c 93       	st	X, r24
 5e8:	df 01       	movw	r26, r30
 5ea:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 16)
	*buffer++ = UEDATX;
 5ec:	80 91 f1 00 	lds	r24, 0x00F1
 5f0:	81 83       	std	Z+1, r24	; 0x01
 5f2:	fd 01       	movw	r30, r26
 5f4:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 15)
	*buffer++ = UEDATX;
 5f6:	80 91 f1 00 	lds	r24, 0x00F1
 5fa:	11 96       	adiw	r26, 0x01	; 1
 5fc:	8c 93       	st	X, r24
 5fe:	df 01       	movw	r26, r30
 600:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 14)
	*buffer++ = UEDATX;
 602:	80 91 f1 00 	lds	r24, 0x00F1
 606:	81 83       	std	Z+1, r24	; 0x01
 608:	fd 01       	movw	r30, r26
 60a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 13)
	*buffer++ = UEDATX;
 60c:	80 91 f1 00 	lds	r24, 0x00F1
 610:	11 96       	adiw	r26, 0x01	; 1
 612:	8c 93       	st	X, r24
 614:	df 01       	movw	r26, r30
 616:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 12)
	*buffer++ = UEDATX;
 618:	80 91 f1 00 	lds	r24, 0x00F1
 61c:	81 83       	std	Z+1, r24	; 0x01
 61e:	fd 01       	movw	r30, r26
 620:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 11)
	*buffer++ = UEDATX;
 622:	80 91 f1 00 	lds	r24, 0x00F1
 626:	11 96       	adiw	r26, 0x01	; 1
 628:	8c 93       	st	X, r24
 62a:	df 01       	movw	r26, r30
 62c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 10)
	*buffer++ = UEDATX;
 62e:	80 91 f1 00 	lds	r24, 0x00F1
 632:	81 83       	std	Z+1, r24	; 0x01
 634:	fd 01       	movw	r30, r26
 636:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 9)
	*buffer++ = UEDATX;
 638:	80 91 f1 00 	lds	r24, 0x00F1
 63c:	11 96       	adiw	r26, 0x01	; 1
 63e:	8c 93       	st	X, r24
 640:	df 01       	movw	r26, r30
 642:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 8)
	*buffer++ = UEDATX;
 644:	80 91 f1 00 	lds	r24, 0x00F1
 648:	81 83       	std	Z+1, r24	; 0x01
 64a:	fd 01       	movw	r30, r26
 64c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 7)
	*buffer++ = UEDATX;
 64e:	80 91 f1 00 	lds	r24, 0x00F1
 652:	11 96       	adiw	r26, 0x01	; 1
 654:	8c 93       	st	X, r24
 656:	df 01       	movw	r26, r30
 658:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 6)
	*buffer++ = UEDATX;
 65a:	80 91 f1 00 	lds	r24, 0x00F1
 65e:	81 83       	std	Z+1, r24	; 0x01
 660:	fd 01       	movw	r30, r26
 662:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 5)
	*buffer++ = UEDATX;
 664:	80 91 f1 00 	lds	r24, 0x00F1
 668:	11 96       	adiw	r26, 0x01	; 1
 66a:	8c 93       	st	X, r24
 66c:	df 01       	movw	r26, r30
 66e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 4)
	*buffer++ = UEDATX;
 670:	80 91 f1 00 	lds	r24, 0x00F1
 674:	81 83       	std	Z+1, r24	; 0x01
 676:	fd 01       	movw	r30, r26
 678:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_RX_SIZE >= 3)
	*buffer++ = UEDATX;
 67a:	80 91 f1 00 	lds	r24, 0x00F1
 67e:	11 96       	adiw	r26, 0x01	; 1
 680:	8c 93       	st	X, r24
	#endif
	#if (RAWHID_RX_SIZE >= 2)
	*buffer++ = UEDATX;
 682:	80 91 f1 00 	lds	r24, 0x00F1
 686:	81 83       	std	Z+1, r24	; 0x01
	#endif
	#if (RAWHID_RX_SIZE >= 1)
	*buffer++ = UEDATX;
 688:	80 91 f1 00 	lds	r24, 0x00F1
 68c:	82 83       	std	Z+2, r24	; 0x02
	#endif
	// release the buffer
	UEINTX = 0x6B;
 68e:	8b e6       	ldi	r24, 0x6B	; 107
 690:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
 694:	2f bf       	out	0x3f, r18	; 63
 696:	80 e4       	ldi	r24, 0x40	; 64
 698:	08 95       	ret
	return RAWHID_RX_SIZE;
 69a:	8f ef       	ldi	r24, 0xFF	; 255
}
 69c:	08 95       	ret

0000069e <usb_rawhid_send>:

// send a packet, with timeout
int8_t usb_rawhid_send(const uint8_t *buffer, uint8_t timeout)
{
 69e:	dc 01       	movw	r26, r24
	uint8_t intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 6a0:	80 91 04 01 	lds	r24, 0x0104
 6a4:	88 23       	and	r24, r24
 6a6:	09 f4       	brne	.+2      	; 0x6aa <usb_rawhid_send+0xc>
 6a8:	7a c1       	rjmp	.+756    	; 0x99e <usb_rawhid_send+0x300>
	intr_state = SREG;
 6aa:	2f b7       	in	r18, 0x3f	; 63
	cli();
 6ac:	f8 94       	cli
	tx_timeout_count = timeout;
 6ae:	60 93 07 01 	sts	0x0107, r22
	UENUM = RAWHID_TX_ENDPOINT;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	80 93 e9 00 	sts	0x00E9, r24
		SREG = intr_state;
		if (tx_timeout_count == 0) return 0;
		if (!usb_configuration) return -1;
		intr_state = SREG;
		cli();
		UENUM = RAWHID_TX_ENDPOINT;
 6b8:	91 e0       	ldi	r25, 0x01	; 1
	cli();
	tx_timeout_count = timeout;
	UENUM = RAWHID_TX_ENDPOINT;
	// wait for the FIFO to be ready to accept data
	while (1) {
		if (UEINTX & (1<<RWAL)) break;
 6ba:	80 91 e8 00 	lds	r24, 0x00E8
 6be:	85 fd       	sbrc	r24, 5
 6c0:	10 c0       	rjmp	.+32     	; 0x6e2 <usb_rawhid_send+0x44>
		SREG = intr_state;
 6c2:	2f bf       	out	0x3f, r18	; 63
		if (tx_timeout_count == 0) return 0;
 6c4:	80 91 07 01 	lds	r24, 0x0107
 6c8:	88 23       	and	r24, r24
 6ca:	09 f4       	brne	.+2      	; 0x6ce <usb_rawhid_send+0x30>
 6cc:	69 c1       	rjmp	.+722    	; 0x9a0 <usb_rawhid_send+0x302>
		if (!usb_configuration) return -1;
 6ce:	80 91 04 01 	lds	r24, 0x0104
 6d2:	88 23       	and	r24, r24
 6d4:	09 f4       	brne	.+2      	; 0x6d8 <usb_rawhid_send+0x3a>
 6d6:	63 c1       	rjmp	.+710    	; 0x99e <usb_rawhid_send+0x300>
		intr_state = SREG;
 6d8:	2f b7       	in	r18, 0x3f	; 63
		cli();
 6da:	f8 94       	cli
		UENUM = RAWHID_TX_ENDPOINT;
 6dc:	90 93 e9 00 	sts	0x00E9, r25
 6e0:	ec cf       	rjmp	.-40     	; 0x6ba <usb_rawhid_send+0x1c>
	}
	// write bytes from the FIFO
	#if (RAWHID_TX_SIZE >= 64)
	UEDATX = *buffer++;
 6e2:	fd 01       	movw	r30, r26
 6e4:	81 91       	ld	r24, Z+
 6e6:	80 93 f1 00 	sts	0x00F1, r24
	#endif
	#if (RAWHID_TX_SIZE >= 63)
	UEDATX = *buffer++;
 6ea:	11 96       	adiw	r26, 0x01	; 1
 6ec:	8c 91       	ld	r24, X
 6ee:	80 93 f1 00 	sts	0x00F1, r24
 6f2:	df 01       	movw	r26, r30
 6f4:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 62)
	UEDATX = *buffer++;
 6f6:	81 81       	ldd	r24, Z+1	; 0x01
 6f8:	80 93 f1 00 	sts	0x00F1, r24
 6fc:	fd 01       	movw	r30, r26
 6fe:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 61)
	UEDATX = *buffer++;
 700:	11 96       	adiw	r26, 0x01	; 1
 702:	8c 91       	ld	r24, X
 704:	80 93 f1 00 	sts	0x00F1, r24
 708:	df 01       	movw	r26, r30
 70a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 60)
	UEDATX = *buffer++;
 70c:	81 81       	ldd	r24, Z+1	; 0x01
 70e:	80 93 f1 00 	sts	0x00F1, r24
 712:	fd 01       	movw	r30, r26
 714:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 59)
	UEDATX = *buffer++;
 716:	11 96       	adiw	r26, 0x01	; 1
 718:	8c 91       	ld	r24, X
 71a:	80 93 f1 00 	sts	0x00F1, r24
 71e:	df 01       	movw	r26, r30
 720:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 58)
	UEDATX = *buffer++;
 722:	81 81       	ldd	r24, Z+1	; 0x01
 724:	80 93 f1 00 	sts	0x00F1, r24
 728:	fd 01       	movw	r30, r26
 72a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 57)
	UEDATX = *buffer++;
 72c:	11 96       	adiw	r26, 0x01	; 1
 72e:	8c 91       	ld	r24, X
 730:	80 93 f1 00 	sts	0x00F1, r24
 734:	df 01       	movw	r26, r30
 736:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 56)
	UEDATX = *buffer++;
 738:	81 81       	ldd	r24, Z+1	; 0x01
 73a:	80 93 f1 00 	sts	0x00F1, r24
 73e:	fd 01       	movw	r30, r26
 740:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 55)
	UEDATX = *buffer++;
 742:	11 96       	adiw	r26, 0x01	; 1
 744:	8c 91       	ld	r24, X
 746:	80 93 f1 00 	sts	0x00F1, r24
 74a:	df 01       	movw	r26, r30
 74c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 54)
	UEDATX = *buffer++;
 74e:	81 81       	ldd	r24, Z+1	; 0x01
 750:	80 93 f1 00 	sts	0x00F1, r24
 754:	fd 01       	movw	r30, r26
 756:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 53)
	UEDATX = *buffer++;
 758:	11 96       	adiw	r26, 0x01	; 1
 75a:	8c 91       	ld	r24, X
 75c:	80 93 f1 00 	sts	0x00F1, r24
 760:	df 01       	movw	r26, r30
 762:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 52)
	UEDATX = *buffer++;
 764:	81 81       	ldd	r24, Z+1	; 0x01
 766:	80 93 f1 00 	sts	0x00F1, r24
 76a:	fd 01       	movw	r30, r26
 76c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 51)
	UEDATX = *buffer++;
 76e:	11 96       	adiw	r26, 0x01	; 1
 770:	8c 91       	ld	r24, X
 772:	80 93 f1 00 	sts	0x00F1, r24
 776:	df 01       	movw	r26, r30
 778:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 50)
	UEDATX = *buffer++;
 77a:	81 81       	ldd	r24, Z+1	; 0x01
 77c:	80 93 f1 00 	sts	0x00F1, r24
 780:	fd 01       	movw	r30, r26
 782:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 49)
	UEDATX = *buffer++;
 784:	11 96       	adiw	r26, 0x01	; 1
 786:	8c 91       	ld	r24, X
 788:	80 93 f1 00 	sts	0x00F1, r24
 78c:	df 01       	movw	r26, r30
 78e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 48)
	UEDATX = *buffer++;
 790:	81 81       	ldd	r24, Z+1	; 0x01
 792:	80 93 f1 00 	sts	0x00F1, r24
 796:	fd 01       	movw	r30, r26
 798:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 47)
	UEDATX = *buffer++;
 79a:	11 96       	adiw	r26, 0x01	; 1
 79c:	8c 91       	ld	r24, X
 79e:	80 93 f1 00 	sts	0x00F1, r24
 7a2:	df 01       	movw	r26, r30
 7a4:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 46)
	UEDATX = *buffer++;
 7a6:	81 81       	ldd	r24, Z+1	; 0x01
 7a8:	80 93 f1 00 	sts	0x00F1, r24
 7ac:	fd 01       	movw	r30, r26
 7ae:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 45)
	UEDATX = *buffer++;
 7b0:	11 96       	adiw	r26, 0x01	; 1
 7b2:	8c 91       	ld	r24, X
 7b4:	80 93 f1 00 	sts	0x00F1, r24
 7b8:	df 01       	movw	r26, r30
 7ba:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 44)
	UEDATX = *buffer++;
 7bc:	81 81       	ldd	r24, Z+1	; 0x01
 7be:	80 93 f1 00 	sts	0x00F1, r24
 7c2:	fd 01       	movw	r30, r26
 7c4:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 43)
	UEDATX = *buffer++;
 7c6:	11 96       	adiw	r26, 0x01	; 1
 7c8:	8c 91       	ld	r24, X
 7ca:	80 93 f1 00 	sts	0x00F1, r24
 7ce:	df 01       	movw	r26, r30
 7d0:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 42)
	UEDATX = *buffer++;
 7d2:	81 81       	ldd	r24, Z+1	; 0x01
 7d4:	80 93 f1 00 	sts	0x00F1, r24
 7d8:	fd 01       	movw	r30, r26
 7da:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 41)
	UEDATX = *buffer++;
 7dc:	11 96       	adiw	r26, 0x01	; 1
 7de:	8c 91       	ld	r24, X
 7e0:	80 93 f1 00 	sts	0x00F1, r24
 7e4:	df 01       	movw	r26, r30
 7e6:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 40)
	UEDATX = *buffer++;
 7e8:	81 81       	ldd	r24, Z+1	; 0x01
 7ea:	80 93 f1 00 	sts	0x00F1, r24
 7ee:	fd 01       	movw	r30, r26
 7f0:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 39)
	UEDATX = *buffer++;
 7f2:	11 96       	adiw	r26, 0x01	; 1
 7f4:	8c 91       	ld	r24, X
 7f6:	80 93 f1 00 	sts	0x00F1, r24
 7fa:	df 01       	movw	r26, r30
 7fc:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 38)
	UEDATX = *buffer++;
 7fe:	81 81       	ldd	r24, Z+1	; 0x01
 800:	80 93 f1 00 	sts	0x00F1, r24
 804:	fd 01       	movw	r30, r26
 806:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 37)
	UEDATX = *buffer++;
 808:	11 96       	adiw	r26, 0x01	; 1
 80a:	8c 91       	ld	r24, X
 80c:	80 93 f1 00 	sts	0x00F1, r24
 810:	df 01       	movw	r26, r30
 812:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 36)
	UEDATX = *buffer++;
 814:	81 81       	ldd	r24, Z+1	; 0x01
 816:	80 93 f1 00 	sts	0x00F1, r24
 81a:	fd 01       	movw	r30, r26
 81c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 35)
	UEDATX = *buffer++;
 81e:	11 96       	adiw	r26, 0x01	; 1
 820:	8c 91       	ld	r24, X
 822:	80 93 f1 00 	sts	0x00F1, r24
 826:	df 01       	movw	r26, r30
 828:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 34)
	UEDATX = *buffer++;
 82a:	81 81       	ldd	r24, Z+1	; 0x01
 82c:	80 93 f1 00 	sts	0x00F1, r24
 830:	fd 01       	movw	r30, r26
 832:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 33)
	UEDATX = *buffer++;
 834:	11 96       	adiw	r26, 0x01	; 1
 836:	8c 91       	ld	r24, X
 838:	80 93 f1 00 	sts	0x00F1, r24
 83c:	df 01       	movw	r26, r30
 83e:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 32)
	UEDATX = *buffer++;
 840:	81 81       	ldd	r24, Z+1	; 0x01
 842:	80 93 f1 00 	sts	0x00F1, r24
 846:	fd 01       	movw	r30, r26
 848:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 31)
	UEDATX = *buffer++;
 84a:	11 96       	adiw	r26, 0x01	; 1
 84c:	8c 91       	ld	r24, X
 84e:	80 93 f1 00 	sts	0x00F1, r24
 852:	df 01       	movw	r26, r30
 854:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 30)
	UEDATX = *buffer++;
 856:	81 81       	ldd	r24, Z+1	; 0x01
 858:	80 93 f1 00 	sts	0x00F1, r24
 85c:	fd 01       	movw	r30, r26
 85e:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 29)
	UEDATX = *buffer++;
 860:	11 96       	adiw	r26, 0x01	; 1
 862:	8c 91       	ld	r24, X
 864:	80 93 f1 00 	sts	0x00F1, r24
 868:	df 01       	movw	r26, r30
 86a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 28)
	UEDATX = *buffer++;
 86c:	81 81       	ldd	r24, Z+1	; 0x01
 86e:	80 93 f1 00 	sts	0x00F1, r24
 872:	fd 01       	movw	r30, r26
 874:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 27)
	UEDATX = *buffer++;
 876:	11 96       	adiw	r26, 0x01	; 1
 878:	8c 91       	ld	r24, X
 87a:	80 93 f1 00 	sts	0x00F1, r24
 87e:	df 01       	movw	r26, r30
 880:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 26)
	UEDATX = *buffer++;
 882:	81 81       	ldd	r24, Z+1	; 0x01
 884:	80 93 f1 00 	sts	0x00F1, r24
 888:	fd 01       	movw	r30, r26
 88a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 25)
	UEDATX = *buffer++;
 88c:	11 96       	adiw	r26, 0x01	; 1
 88e:	8c 91       	ld	r24, X
 890:	80 93 f1 00 	sts	0x00F1, r24
 894:	df 01       	movw	r26, r30
 896:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 24)
	UEDATX = *buffer++;
 898:	81 81       	ldd	r24, Z+1	; 0x01
 89a:	80 93 f1 00 	sts	0x00F1, r24
 89e:	fd 01       	movw	r30, r26
 8a0:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 23)
	UEDATX = *buffer++;
 8a2:	11 96       	adiw	r26, 0x01	; 1
 8a4:	8c 91       	ld	r24, X
 8a6:	80 93 f1 00 	sts	0x00F1, r24
 8aa:	df 01       	movw	r26, r30
 8ac:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 22)
	UEDATX = *buffer++;
 8ae:	81 81       	ldd	r24, Z+1	; 0x01
 8b0:	80 93 f1 00 	sts	0x00F1, r24
 8b4:	fd 01       	movw	r30, r26
 8b6:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 21)
	UEDATX = *buffer++;
 8b8:	11 96       	adiw	r26, 0x01	; 1
 8ba:	8c 91       	ld	r24, X
 8bc:	80 93 f1 00 	sts	0x00F1, r24
 8c0:	df 01       	movw	r26, r30
 8c2:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 20)
	UEDATX = *buffer++;
 8c4:	81 81       	ldd	r24, Z+1	; 0x01
 8c6:	80 93 f1 00 	sts	0x00F1, r24
 8ca:	fd 01       	movw	r30, r26
 8cc:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 19)
	UEDATX = *buffer++;
 8ce:	11 96       	adiw	r26, 0x01	; 1
 8d0:	8c 91       	ld	r24, X
 8d2:	80 93 f1 00 	sts	0x00F1, r24
 8d6:	df 01       	movw	r26, r30
 8d8:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 18)
	UEDATX = *buffer++;
 8da:	81 81       	ldd	r24, Z+1	; 0x01
 8dc:	80 93 f1 00 	sts	0x00F1, r24
 8e0:	fd 01       	movw	r30, r26
 8e2:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 17)
	UEDATX = *buffer++;
 8e4:	11 96       	adiw	r26, 0x01	; 1
 8e6:	8c 91       	ld	r24, X
 8e8:	80 93 f1 00 	sts	0x00F1, r24
 8ec:	df 01       	movw	r26, r30
 8ee:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 16)
	UEDATX = *buffer++;
 8f0:	81 81       	ldd	r24, Z+1	; 0x01
 8f2:	80 93 f1 00 	sts	0x00F1, r24
 8f6:	fd 01       	movw	r30, r26
 8f8:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 15)
	UEDATX = *buffer++;
 8fa:	11 96       	adiw	r26, 0x01	; 1
 8fc:	8c 91       	ld	r24, X
 8fe:	80 93 f1 00 	sts	0x00F1, r24
 902:	df 01       	movw	r26, r30
 904:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 14)
	UEDATX = *buffer++;
 906:	81 81       	ldd	r24, Z+1	; 0x01
 908:	80 93 f1 00 	sts	0x00F1, r24
 90c:	fd 01       	movw	r30, r26
 90e:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 13)
	UEDATX = *buffer++;
 910:	11 96       	adiw	r26, 0x01	; 1
 912:	8c 91       	ld	r24, X
 914:	80 93 f1 00 	sts	0x00F1, r24
 918:	df 01       	movw	r26, r30
 91a:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 12)
	UEDATX = *buffer++;
 91c:	81 81       	ldd	r24, Z+1	; 0x01
 91e:	80 93 f1 00 	sts	0x00F1, r24
 922:	fd 01       	movw	r30, r26
 924:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 11)
	UEDATX = *buffer++;
 926:	11 96       	adiw	r26, 0x01	; 1
 928:	8c 91       	ld	r24, X
 92a:	80 93 f1 00 	sts	0x00F1, r24
 92e:	df 01       	movw	r26, r30
 930:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 10)
	UEDATX = *buffer++;
 932:	81 81       	ldd	r24, Z+1	; 0x01
 934:	80 93 f1 00 	sts	0x00F1, r24
 938:	fd 01       	movw	r30, r26
 93a:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 9)
	UEDATX = *buffer++;
 93c:	11 96       	adiw	r26, 0x01	; 1
 93e:	8c 91       	ld	r24, X
 940:	80 93 f1 00 	sts	0x00F1, r24
 944:	df 01       	movw	r26, r30
 946:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 8)
	UEDATX = *buffer++;
 948:	81 81       	ldd	r24, Z+1	; 0x01
 94a:	80 93 f1 00 	sts	0x00F1, r24
 94e:	fd 01       	movw	r30, r26
 950:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 7)
	UEDATX = *buffer++;
 952:	11 96       	adiw	r26, 0x01	; 1
 954:	8c 91       	ld	r24, X
 956:	80 93 f1 00 	sts	0x00F1, r24
 95a:	df 01       	movw	r26, r30
 95c:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 6)
	UEDATX = *buffer++;
 95e:	81 81       	ldd	r24, Z+1	; 0x01
 960:	80 93 f1 00 	sts	0x00F1, r24
 964:	fd 01       	movw	r30, r26
 966:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 5)
	UEDATX = *buffer++;
 968:	11 96       	adiw	r26, 0x01	; 1
 96a:	8c 91       	ld	r24, X
 96c:	80 93 f1 00 	sts	0x00F1, r24
 970:	df 01       	movw	r26, r30
 972:	11 96       	adiw	r26, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 4)
	UEDATX = *buffer++;
 974:	81 81       	ldd	r24, Z+1	; 0x01
 976:	80 93 f1 00 	sts	0x00F1, r24
 97a:	fd 01       	movw	r30, r26
 97c:	31 96       	adiw	r30, 0x01	; 1
	#endif
	#if (RAWHID_TX_SIZE >= 3)
	UEDATX = *buffer++;
 97e:	11 96       	adiw	r26, 0x01	; 1
 980:	8c 91       	ld	r24, X
 982:	80 93 f1 00 	sts	0x00F1, r24
	#endif
	#if (RAWHID_TX_SIZE >= 2)
	UEDATX = *buffer++;
 986:	81 81       	ldd	r24, Z+1	; 0x01
 988:	80 93 f1 00 	sts	0x00F1, r24
	#endif
	#if (RAWHID_TX_SIZE >= 1)
	UEDATX = *buffer++;
 98c:	82 81       	ldd	r24, Z+2	; 0x02
 98e:	80 93 f1 00 	sts	0x00F1, r24
	#endif
	/**/
	// transmit it now
	UEINTX = 0x3A;
 992:	8a e3       	ldi	r24, 0x3A	; 58
 994:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
 998:	2f bf       	out	0x3f, r18	; 63
 99a:	80 e4       	ldi	r24, 0x40	; 64
 99c:	08 95       	ret
	return RAWHID_TX_SIZE;
 99e:	8f ef       	ldi	r24, 0xFF	; 255
}
 9a0:	08 95       	ret

000009a2 <usb_debug_putchar>:



// transmit a character.  0 returned on success, -1 on error
int8_t usb_debug_putchar(uint8_t c)
{
 9a2:	48 2f       	mov	r20, r24
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 9a4:	80 91 04 01 	lds	r24, 0x0104
 9a8:	88 23       	and	r24, r24
 9aa:	09 f4       	brne	.+2      	; 0x9ae <usb_debug_putchar+0xc>
 9ac:	3e c0       	rjmp	.+124    	; 0xa2a <usb_debug_putchar+0x88>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 9ae:	2f b7       	in	r18, 0x3f	; 63
	cli();
 9b0:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 9b2:	83 e0       	ldi	r24, 0x03	; 3
 9b4:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 9b8:	80 91 08 01 	lds	r24, 0x0108
 9bc:	88 23       	and	r24, r24
 9be:	41 f0       	breq	.+16     	; 0x9d0 <usb_debug_putchar+0x2e>
		if (!(UEINTX & (1<<RWAL))) {
 9c0:	80 91 e8 00 	lds	r24, 0x00E8
 9c4:	85 fd       	sbrc	r24, 5
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <usb_debug_putchar+0x2a>
			SREG = intr_state;
 9c8:	2f bf       	out	0x3f, r18	; 63
 9ca:	12 c0       	rjmp	.+36     	; 0x9f0 <usb_debug_putchar+0x4e>
			return -1;
		}
		previous_timeout = 0;
 9cc:	10 92 08 01 	sts	0x0108, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 3;
 9d0:	90 91 e4 00 	lds	r25, 0x00E4
 9d4:	9d 5f       	subi	r25, 0xFD	; 253
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 9d6:	33 e0       	ldi	r19, 0x03	; 3
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 3;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 9d8:	80 91 e8 00 	lds	r24, 0x00E8
 9dc:	85 fd       	sbrc	r24, 5
 9de:	13 c0       	rjmp	.+38     	; 0xa06 <usb_debug_putchar+0x64>
		SREG = intr_state;
 9e0:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 9e2:	80 91 e4 00 	lds	r24, 0x00E4
 9e6:	89 17       	cp	r24, r25
 9e8:	29 f4       	brne	.+10     	; 0x9f4 <usb_debug_putchar+0x52>
			previous_timeout = 1;
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	80 93 08 01 	sts	0x0108, r24
 9f0:	8f ef       	ldi	r24, 0xFF	; 255
 9f2:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 9f4:	80 91 04 01 	lds	r24, 0x0104
 9f8:	88 23       	and	r24, r24
 9fa:	b9 f0       	breq	.+46     	; 0xa2a <usb_debug_putchar+0x88>
		// get ready to try checking again
		intr_state = SREG;
 9fc:	2f b7       	in	r18, 0x3f	; 63
		cli();
 9fe:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 a00:	30 93 e9 00 	sts	0x00E9, r19
 a04:	e9 cf       	rjmp	.-46     	; 0x9d8 <usb_debug_putchar+0x36>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 a06:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 a0a:	80 91 e8 00 	lds	r24, 0x00E8
 a0e:	85 fd       	sbrc	r24, 5
 a10:	06 c0       	rjmp	.+12     	; 0xa1e <usb_debug_putchar+0x7c>
		UEINTX = 0x3A;
 a12:	8a e3       	ldi	r24, 0x3A	; 58
 a14:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 a18:	10 92 05 01 	sts	0x0105, r1
 a1c:	03 c0       	rjmp	.+6      	; 0xa24 <usb_debug_putchar+0x82>
	} else {
		debug_flush_timer = 2;
 a1e:	82 e0       	ldi	r24, 0x02	; 2
 a20:	80 93 05 01 	sts	0x0105, r24
	}
	SREG = intr_state;
 a24:	2f bf       	out	0x3f, r18	; 63
 a26:	80 e0       	ldi	r24, 0x00	; 0
 a28:	08 95       	ret
	return 0;
 a2a:	8f ef       	ldi	r24, 0xFF	; 255
}
 a2c:	08 95       	ret

00000a2e <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 a2e:	1f 92       	push	r1
 a30:	0f 92       	push	r0
 a32:	0f b6       	in	r0, 0x3f	; 63
 a34:	0f 92       	push	r0
 a36:	11 24       	eor	r1, r1
 a38:	8f 93       	push	r24
 a3a:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 a3c:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 a40:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 a44:	98 2f       	mov	r25, r24
 a46:	83 ff       	sbrs	r24, 3
 a48:	0f c0       	rjmp	.+30     	; 0xa68 <__vector_10+0x3a>
		UENUM = 0;
 a4a:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 a54:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 a58:	82 e1       	ldi	r24, 0x12	; 18
 a5a:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 a5e:	88 e0       	ldi	r24, 0x08	; 8
 a60:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 a64:	10 92 04 01 	sts	0x0104, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 a68:	92 ff       	sbrs	r25, 2
 a6a:	28 c0       	rjmp	.+80     	; 0xabc <__vector_10+0x8e>
 a6c:	80 91 04 01 	lds	r24, 0x0104
 a70:	88 23       	and	r24, r24
 a72:	21 f1       	breq	.+72     	; 0xabc <__vector_10+0x8e>
		t = debug_flush_timer;
 a74:	80 91 05 01 	lds	r24, 0x0105
		if (t) {
 a78:	88 23       	and	r24, r24
 a7a:	91 f0       	breq	.+36     	; 0xaa0 <__vector_10+0x72>
			debug_flush_timer = -- t;
 a7c:	81 50       	subi	r24, 0x01	; 1
 a7e:	80 93 05 01 	sts	0x0105, r24
			if (!t) {
 a82:	88 23       	and	r24, r24
 a84:	69 f4       	brne	.+26     	; 0xaa0 <__vector_10+0x72>
				UENUM = DEBUG_TX_ENDPOINT;
 a86:	83 e0       	ldi	r24, 0x03	; 3
 a88:	80 93 e9 00 	sts	0x00E9, r24
 a8c:	02 c0       	rjmp	.+4      	; 0xa92 <__vector_10+0x64>
				while ((UEINTX & (1<<RWAL))) {
					UEDATX = 0;
 a8e:	10 92 f1 00 	sts	0x00F1, r1
		t = debug_flush_timer;
		if (t) {
			debug_flush_timer = -- t;
			if (!t) {
				UENUM = DEBUG_TX_ENDPOINT;
				while ((UEINTX & (1<<RWAL))) {
 a92:	80 91 e8 00 	lds	r24, 0x00E8
 a96:	85 fd       	sbrc	r24, 5
 a98:	fa cf       	rjmp	.-12     	; 0xa8e <__vector_10+0x60>
					UEDATX = 0;
				}
				UEINTX = 0x3A;
 a9a:	8a e3       	ldi	r24, 0x3A	; 58
 a9c:	80 93 e8 00 	sts	0x00E8, r24
			}
		}
		t = rx_timeout_count;
 aa0:	80 91 06 01 	lds	r24, 0x0106
		if (t) rx_timeout_count = --t;
 aa4:	88 23       	and	r24, r24
 aa6:	19 f0       	breq	.+6      	; 0xaae <__vector_10+0x80>
 aa8:	81 50       	subi	r24, 0x01	; 1
 aaa:	80 93 06 01 	sts	0x0106, r24
		t = tx_timeout_count;
 aae:	80 91 07 01 	lds	r24, 0x0107
		if (t) tx_timeout_count = --t;
 ab2:	88 23       	and	r24, r24
 ab4:	19 f0       	breq	.+6      	; 0xabc <__vector_10+0x8e>
 ab6:	81 50       	subi	r24, 0x01	; 1
 ab8:	80 93 07 01 	sts	0x0107, r24
	}
}
 abc:	9f 91       	pop	r25
 abe:	8f 91       	pop	r24
 ac0:	0f 90       	pop	r0
 ac2:	0f be       	out	0x3f, r0	; 63
 ac4:	0f 90       	pop	r0
 ac6:	1f 90       	pop	r1
 ac8:	18 95       	reti

00000aca <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 aca:	1f 92       	push	r1
 acc:	0f 92       	push	r0
 ace:	0f b6       	in	r0, 0x3f	; 63
 ad0:	0f 92       	push	r0
 ad2:	0b b6       	in	r0, 0x3b	; 59
 ad4:	0f 92       	push	r0
 ad6:	11 24       	eor	r1, r1
 ad8:	2f 93       	push	r18
 ada:	3f 93       	push	r19
 adc:	4f 93       	push	r20
 ade:	5f 93       	push	r21
 ae0:	6f 93       	push	r22
 ae2:	7f 93       	push	r23
 ae4:	8f 93       	push	r24
 ae6:	9f 93       	push	r25
 ae8:	af 93       	push	r26
 aea:	bf 93       	push	r27
 aec:	cf 93       	push	r28
 aee:	df 93       	push	r29
 af0:	ef 93       	push	r30
 af2:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 af4:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
 af8:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 afc:	83 ff       	sbrs	r24, 3
 afe:	6e c1       	rjmp	.+732    	; 0xddc <__vector_11+0x312>
                bmRequestType = UEDATX;
 b00:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 b04:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 b08:	80 91 f1 00 	lds	r24, 0x00F1
 b0c:	a8 2f       	mov	r26, r24
 b0e:	b0 e0       	ldi	r27, 0x00	; 0
                wValue |= (UEDATX << 8);
 b10:	20 91 f1 00 	lds	r18, 0x00F1
 b14:	92 2f       	mov	r25, r18
 b16:	80 e0       	ldi	r24, 0x00	; 0
 b18:	a8 2b       	or	r26, r24
 b1a:	b9 2b       	or	r27, r25
                wIndex = UEDATX;
 b1c:	80 91 f1 00 	lds	r24, 0x00F1
 b20:	68 2f       	mov	r22, r24
 b22:	70 e0       	ldi	r23, 0x00	; 0
                wIndex |= (UEDATX << 8);
 b24:	20 91 f1 00 	lds	r18, 0x00F1
 b28:	92 2f       	mov	r25, r18
 b2a:	80 e0       	ldi	r24, 0x00	; 0
 b2c:	68 2b       	or	r22, r24
 b2e:	79 2b       	or	r23, r25
                wLength = UEDATX;
 b30:	80 91 f1 00 	lds	r24, 0x00F1
 b34:	c8 2f       	mov	r28, r24
 b36:	d0 e0       	ldi	r29, 0x00	; 0
                wLength |= (UEDATX << 8);
 b38:	20 91 f1 00 	lds	r18, 0x00F1
 b3c:	92 2f       	mov	r25, r18
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	c8 2b       	or	r28, r24
 b42:	d9 2b       	or	r29, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 b44:	82 ef       	ldi	r24, 0xF2	; 242
 b46:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 b4a:	36 30       	cpi	r19, 0x06	; 6
 b4c:	09 f0       	breq	.+2      	; 0xb50 <__vector_11+0x86>
 b4e:	56 c0       	rjmp	.+172    	; 0xbfc <__vector_11+0x132>
 b50:	22 ef       	ldi	r18, 0xF2	; 242
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	a9 01       	movw	r20, r18
 b56:	45 50       	subi	r20, 0x05	; 5
 b58:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 b5a:	f9 01       	movw	r30, r18
 b5c:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 b5e:	85 91       	lpm	r24, Z+
 b60:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 b62:	8a 17       	cp	r24, r26
 b64:	9b 07       	cpc	r25, r27
 b66:	e1 f4       	brne	.+56     	; 0xba0 <__vector_11+0xd6>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 b68:	fa 01       	movw	r30, r20
 b6a:	85 91       	lpm	r24, Z+
 b6c:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 b6e:	86 17       	cp	r24, r22
 b70:	97 07       	cpc	r25, r23
 b72:	b1 f4       	brne	.+44     	; 0xba0 <__vector_11+0xd6>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 b74:	9a 01       	movw	r18, r20
 b76:	2e 5f       	subi	r18, 0xFE	; 254
 b78:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 b7a:	f9 01       	movw	r30, r18
 b7c:	65 91       	lpm	r22, Z+
 b7e:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 b80:	2e 5f       	subi	r18, 0xFE	; 254
 b82:	3f 4f       	sbci	r19, 0xFF	; 255
 b84:	f9 01       	movw	r30, r18
 b86:	24 91       	lpm	r18, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 b88:	ce 01       	movw	r24, r28
 b8a:	cf 3f       	cpi	r28, 0xFF	; 255
 b8c:	d1 05       	cpc	r29, r1
 b8e:	19 f0       	breq	.+6      	; 0xb96 <__vector_11+0xcc>
 b90:	10 f0       	brcs	.+4      	; 0xb96 <__vector_11+0xcc>
 b92:	8f ef       	ldi	r24, 0xFF	; 255
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	42 2f       	mov	r20, r18
 b98:	82 17       	cp	r24, r18
 b9a:	58 f4       	brcc	.+22     	; 0xbb2 <__vector_11+0xe8>
 b9c:	48 2f       	mov	r20, r24
 b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <__vector_11+0xe8>
 ba0:	29 5f       	subi	r18, 0xF9	; 249
 ba2:	3f 4f       	sbci	r19, 0xFF	; 255
 ba4:	49 5f       	subi	r20, 0xF9	; 249
 ba6:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 ba8:	f1 e0       	ldi	r31, 0x01	; 1
 baa:	21 33       	cpi	r18, 0x31	; 49
 bac:	3f 07       	cpc	r19, r31
 bae:	a9 f6       	brne	.-86     	; 0xb5a <__vector_11+0x90>
 bb0:	15 c1       	rjmp	.+554    	; 0xddc <__vector_11+0x312>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 bb2:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 bb4:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 bb8:	28 2f       	mov	r18, r24
 bba:	30 e0       	ldi	r19, 0x00	; 0
 bbc:	c9 01       	movw	r24, r18
 bbe:	85 70       	andi	r24, 0x05	; 5
 bc0:	90 70       	andi	r25, 0x00	; 0
 bc2:	89 2b       	or	r24, r25
 bc4:	b9 f3       	breq	.-18     	; 0xbb4 <__vector_11+0xea>
				if (i & (1<<RXOUTI)) return;	// abort
 bc6:	22 fd       	sbrc	r18, 2
 bc8:	0c c1       	rjmp	.+536    	; 0xde2 <__vector_11+0x318>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 bca:	34 2f       	mov	r19, r20
 bcc:	41 31       	cpi	r20, 0x11	; 17
 bce:	08 f0       	brcs	.+2      	; 0xbd2 <__vector_11+0x108>
 bd0:	30 e1       	ldi	r19, 0x10	; 16
 bd2:	cb 01       	movw	r24, r22
 bd4:	23 2f       	mov	r18, r19
 bd6:	06 c0       	rjmp	.+12     	; 0xbe4 <__vector_11+0x11a>
				for (i = n; i; i--) {
 bd8:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 bda:	01 96       	adiw	r24, 0x01	; 1
 bdc:	e4 91       	lpm	r30, Z+
 bde:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 be2:	21 50       	subi	r18, 0x01	; 1
 be4:	22 23       	and	r18, r18
 be6:	c1 f7       	brne	.-16     	; 0xbd8 <__vector_11+0x10e>
 be8:	63 0f       	add	r22, r19
 bea:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 bec:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 bee:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 bf2:	44 23       	and	r20, r20
 bf4:	f9 f6       	brne	.-66     	; 0xbb4 <__vector_11+0xea>
 bf6:	30 31       	cpi	r19, 0x10	; 16
 bf8:	e9 f2       	breq	.-70     	; 0xbb4 <__vector_11+0xea>
 bfa:	f3 c0       	rjmp	.+486    	; 0xde2 <__vector_11+0x318>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 bfc:	35 30       	cpi	r19, 0x05	; 5
 bfe:	61 f4       	brne	.+24     	; 0xc18 <__vector_11+0x14e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c00:	8e ef       	ldi	r24, 0xFE	; 254
 c02:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 c06:	80 91 e8 00 	lds	r24, 0x00E8
 c0a:	80 ff       	sbrs	r24, 0
 c0c:	fc cf       	rjmp	.-8      	; 0xc06 <__vector_11+0x13c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 c0e:	8a 2f       	mov	r24, r26
 c10:	80 68       	ori	r24, 0x80	; 128
 c12:	80 93 e3 00 	sts	0x00E3, r24
 c16:	e5 c0       	rjmp	.+458    	; 0xde2 <__vector_11+0x318>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 c18:	39 30       	cpi	r19, 0x09	; 9
 c1a:	31 f5       	brne	.+76     	; 0xc68 <__vector_11+0x19e>
 c1c:	44 23       	and	r20, r20
 c1e:	09 f0       	breq	.+2      	; 0xc22 <__vector_11+0x158>
 c20:	72 c0       	rjmp	.+228    	; 0xd06 <__vector_11+0x23c>
			usb_configuration = wValue;
 c22:	a0 93 04 01 	sts	0x0104, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c26:	8e ef       	ldi	r24, 0xFE	; 254
 c28:	80 93 e8 00 	sts	0x00E8, r24
 c2c:	8a e2       	ldi	r24, 0x2A	; 42
 c2e:	91 e0       	ldi	r25, 0x01	; 1
 c30:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 c32:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 c36:	fc 01       	movw	r30, r24
 c38:	01 96       	adiw	r24, 0x01	; 1
 c3a:	e4 91       	lpm	r30, Z+
				UECONX = en;
 c3c:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 c40:	ee 23       	and	r30, r30
 c42:	69 f0       	breq	.+26     	; 0xc5e <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
 c44:	ac 01       	movw	r20, r24
 c46:	4f 5f       	subi	r20, 0xFF	; 255
 c48:	5f 4f       	sbci	r21, 0xFF	; 255
 c4a:	fc 01       	movw	r30, r24
 c4c:	84 91       	lpm	r24, Z+
 c4e:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 c52:	ca 01       	movw	r24, r20
 c54:	01 96       	adiw	r24, 0x01	; 1
 c56:	fa 01       	movw	r30, r20
 c58:	34 91       	lpm	r19, Z+
 c5a:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 c5e:	2f 5f       	subi	r18, 0xFF	; 255
 c60:	25 30       	cpi	r18, 0x05	; 5
 c62:	39 f7       	brne	.-50     	; 0xc32 <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 c64:	8e e1       	ldi	r24, 0x1E	; 30
 c66:	4a c0       	rjmp	.+148    	; 0xcfc <__vector_11+0x232>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 c68:	38 30       	cpi	r19, 0x08	; 8
 c6a:	61 f4       	brne	.+24     	; 0xc84 <__vector_11+0x1ba>
 c6c:	40 38       	cpi	r20, 0x80	; 128
 c6e:	09 f0       	breq	.+2      	; 0xc72 <__vector_11+0x1a8>
 c70:	4a c0       	rjmp	.+148    	; 0xd06 <__vector_11+0x23c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 c72:	80 91 e8 00 	lds	r24, 0x00E8
 c76:	80 ff       	sbrs	r24, 0
 c78:	fc cf       	rjmp	.-8      	; 0xc72 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 c7a:	80 91 04 01 	lds	r24, 0x0104
 c7e:	80 93 f1 00 	sts	0x00F1, r24
 c82:	81 c0       	rjmp	.+258    	; 0xd86 <__vector_11+0x2bc>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 c84:	33 23       	and	r19, r19
 c86:	d1 f4       	brne	.+52     	; 0xcbc <__vector_11+0x1f2>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 c88:	80 91 e8 00 	lds	r24, 0x00E8
 c8c:	80 ff       	sbrs	r24, 0
 c8e:	fc cf       	rjmp	.-8      	; 0xc88 <__vector_11+0x1be>
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			if (bmRequestType == 0x82) {
 c90:	42 38       	cpi	r20, 0x82	; 130
 c92:	11 f0       	breq	.+4      	; 0xc98 <__vector_11+0x1ce>
 c94:	80 e0       	ldi	r24, 0x00	; 0
 c96:	0d c0       	rjmp	.+26     	; 0xcb2 <__vector_11+0x1e8>
				UENUM = wIndex;
 c98:	60 93 e9 00 	sts	0x00E9, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 c9c:	80 91 eb 00 	lds	r24, 0x00EB
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	25 e0       	ldi	r18, 0x05	; 5
 ca4:	96 95       	lsr	r25
 ca6:	87 95       	ror	r24
 ca8:	2a 95       	dec	r18
 caa:	e1 f7       	brne	.-8      	; 0xca4 <__vector_11+0x1da>
 cac:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 cae:	10 92 e9 00 	sts	0x00E9, r1
			}
			UEDATX = i;
 cb2:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 cb6:	10 92 f1 00 	sts	0x00F1, r1
 cba:	65 c0       	rjmp	.+202    	; 0xd86 <__vector_11+0x2bc>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 cbc:	31 30       	cpi	r19, 0x01	; 1
 cbe:	11 f0       	breq	.+4      	; 0xcc4 <__vector_11+0x1fa>
 cc0:	33 30       	cpi	r19, 0x03	; 3
 cc2:	09 f5       	brne	.+66     	; 0xd06 <__vector_11+0x23c>
 cc4:	42 30       	cpi	r20, 0x02	; 2
 cc6:	f9 f4       	brne	.+62     	; 0xd06 <__vector_11+0x23c>
 cc8:	ab 2b       	or	r26, r27
 cca:	e9 f4       	brne	.+58     	; 0xd06 <__vector_11+0x23c>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 ccc:	26 2f       	mov	r18, r22
 cce:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 cd0:	82 2f       	mov	r24, r18
 cd2:	81 50       	subi	r24, 0x01	; 1
 cd4:	84 30       	cpi	r24, 0x04	; 4
 cd6:	b8 f4       	brcc	.+46     	; 0xd06 <__vector_11+0x23c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 cd8:	8e ef       	ldi	r24, 0xFE	; 254
 cda:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 cde:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 ce2:	33 30       	cpi	r19, 0x03	; 3
 ce4:	09 f4       	brne	.+2      	; 0xce8 <__vector_11+0x21e>
 ce6:	7a c0       	rjmp	.+244    	; 0xddc <__vector_11+0x312>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 ce8:	89 e1       	ldi	r24, 0x19	; 25
 cea:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 cee:	81 e0       	ldi	r24, 0x01	; 1
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <__vector_11+0x22e>
 cf4:	88 0f       	add	r24, r24
 cf6:	99 1f       	adc	r25, r25
 cf8:	2a 95       	dec	r18
 cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <__vector_11+0x22a>
 cfc:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 d00:	10 92 ea 00 	sts	0x00EA, r1
 d04:	6e c0       	rjmp	.+220    	; 0xde2 <__vector_11+0x318>
				}
				return;
			}
		}
		if (wIndex == RAWHID_INTERFACE) {
 d06:	61 15       	cp	r22, r1
 d08:	71 05       	cpc	r23, r1
 d0a:	09 f0       	breq	.+2      	; 0xd0e <__vector_11+0x244>
 d0c:	40 c0       	rjmp	.+128    	; 0xd8e <__vector_11+0x2c4>
			if (bmRequestType == 0xA1 && bRequest == HID_GET_REPORT) {
 d0e:	41 3a       	cpi	r20, 0xA1	; 161
 d10:	19 f5       	brne	.+70     	; 0xd58 <__vector_11+0x28e>
 d12:	31 30       	cpi	r19, 0x01	; 1
 d14:	09 f0       	breq	.+2      	; 0xd18 <__vector_11+0x24e>
 d16:	62 c0       	rjmp	.+196    	; 0xddc <__vector_11+0x312>
 d18:	40 e4       	ldi	r20, 0x40	; 64
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 d1a:	5e ef       	ldi	r21, 0xFE	; 254
			if (bmRequestType == 0xA1 && bRequest == HID_GET_REPORT) {
				len = RAWHID_TX_SIZE;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 d1c:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 d20:	28 2f       	mov	r18, r24
 d22:	30 e0       	ldi	r19, 0x00	; 0
 d24:	c9 01       	movw	r24, r18
 d26:	85 70       	andi	r24, 0x05	; 5
 d28:	90 70       	andi	r25, 0x00	; 0
 d2a:	89 2b       	or	r24, r25
 d2c:	b9 f3       	breq	.-18     	; 0xd1c <__vector_11+0x252>
					if (i & (1<<RXOUTI)) return;	// abort
 d2e:	22 fd       	sbrc	r18, 2
 d30:	58 c0       	rjmp	.+176    	; 0xde2 <__vector_11+0x318>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 d32:	94 2f       	mov	r25, r20
 d34:	41 31       	cpi	r20, 0x11	; 17
 d36:	08 f0       	brcs	.+2      	; 0xd3a <__vector_11+0x270>
 d38:	90 e1       	ldi	r25, 0x10	; 16
 d3a:	89 2f       	mov	r24, r25
 d3c:	03 c0       	rjmp	.+6      	; 0xd44 <__vector_11+0x27a>
					for (i = n; i; i--) {
						// just send zeros
						UEDATX = 0;
 d3e:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 d42:	81 50       	subi	r24, 0x01	; 1
 d44:	88 23       	and	r24, r24
 d46:	d9 f7       	brne	.-10     	; 0xd3e <__vector_11+0x274>
						// just send zeros
						UEDATX = 0;
					}
					len -= n;
 d48:	49 1b       	sub	r20, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 d4a:	50 93 e8 00 	sts	0x00E8, r21
						// just send zeros
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 d4e:	44 23       	and	r20, r20
 d50:	29 f7       	brne	.-54     	; 0xd1c <__vector_11+0x252>
 d52:	90 31       	cpi	r25, 0x10	; 16
 d54:	19 f3       	breq	.-58     	; 0xd1c <__vector_11+0x252>
 d56:	45 c0       	rjmp	.+138    	; 0xde2 <__vector_11+0x318>
				return;
			}
			if (bmRequestType == 0x21 && bRequest == HID_SET_REPORT) {
 d58:	41 32       	cpi	r20, 0x21	; 33
 d5a:	09 f0       	breq	.+2      	; 0xd5e <__vector_11+0x294>
 d5c:	3f c0       	rjmp	.+126    	; 0xddc <__vector_11+0x312>
 d5e:	39 30       	cpi	r19, 0x09	; 9
 d60:	e9 f5       	brne	.+122    	; 0xddc <__vector_11+0x312>
 d62:	90 e4       	ldi	r25, 0x40	; 64
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 d64:	2b ef       	ldi	r18, 0xFB	; 251
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 d66:	80 91 e8 00 	lds	r24, 0x00E8
 d6a:	82 ff       	sbrs	r24, 2
 d6c:	fc cf       	rjmp	.-8      	; 0xd66 <__vector_11+0x29c>
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 d6e:	20 93 e8 00 	sts	0x00E8, r18
				return;
			}
			if (bmRequestType == 0x21 && bRequest == HID_SET_REPORT) {
				len = RAWHID_RX_SIZE;
				do {
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 d72:	89 2f       	mov	r24, r25
 d74:	91 31       	cpi	r25, 0x11	; 17
 d76:	08 f0       	brcs	.+2      	; 0xd7a <__vector_11+0x2b0>
 d78:	80 e1       	ldi	r24, 0x10	; 16
					usb_wait_receive_out();
					// ignore incoming bytes
					usb_ack_out();
					len -= n;
 d7a:	98 1b       	sub	r25, r24
				} while (len);
 d7c:	a1 f7       	brne	.-24     	; 0xd66 <__vector_11+0x29c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 d7e:	80 91 e8 00 	lds	r24, 0x00E8
 d82:	80 ff       	sbrs	r24, 0
 d84:	fc cf       	rjmp	.-8      	; 0xd7e <__vector_11+0x2b4>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 d86:	8e ef       	ldi	r24, 0xFE	; 254
 d88:	80 93 e8 00 	sts	0x00E8, r24
 d8c:	2a c0       	rjmp	.+84     	; 0xde2 <__vector_11+0x318>
				usb_wait_in_ready();
				usb_send_in();
				return;
			}
		}
		if (wIndex == DEBUG_INTERFACE) {
 d8e:	61 30       	cpi	r22, 0x01	; 1
 d90:	71 05       	cpc	r23, r1
 d92:	21 f5       	brne	.+72     	; 0xddc <__vector_11+0x312>
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 d94:	31 30       	cpi	r19, 0x01	; 1
 d96:	11 f5       	brne	.+68     	; 0xddc <__vector_11+0x312>
 d98:	41 3a       	cpi	r20, 0xA1	; 161
 d9a:	01 f5       	brne	.+64     	; 0xddc <__vector_11+0x312>
				len = wLength;
 d9c:	4c 2f       	mov	r20, r28
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 d9e:	5e ef       	ldi	r21, 0xFE	; 254
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 da0:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 da4:	28 2f       	mov	r18, r24
 da6:	30 e0       	ldi	r19, 0x00	; 0
 da8:	c9 01       	movw	r24, r18
 daa:	85 70       	andi	r24, 0x05	; 5
 dac:	90 70       	andi	r25, 0x00	; 0
 dae:	89 2b       	or	r24, r25
 db0:	b9 f3       	breq	.-18     	; 0xda0 <__vector_11+0x2d6>
					if (i & (1<<RXOUTI)) return;	// abort
 db2:	22 fd       	sbrc	r18, 2
 db4:	16 c0       	rjmp	.+44     	; 0xde2 <__vector_11+0x318>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 db6:	94 2f       	mov	r25, r20
 db8:	41 31       	cpi	r20, 0x11	; 17
 dba:	08 f0       	brcs	.+2      	; 0xdbe <__vector_11+0x2f4>
 dbc:	90 e1       	ldi	r25, 0x10	; 16
 dbe:	89 2f       	mov	r24, r25
 dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <__vector_11+0x2fe>
					for (i = n; i; i--) {
						UEDATX = 0;
 dc2:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 dc6:	81 50       	subi	r24, 0x01	; 1
 dc8:	88 23       	and	r24, r24
 dca:	d9 f7       	brne	.-10     	; 0xdc2 <__vector_11+0x2f8>
						UEDATX = 0;
					}
					len -= n;
 dcc:	49 1b       	sub	r20, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 dce:	50 93 e8 00 	sts	0x00E8, r21
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 dd2:	44 23       	and	r20, r20
 dd4:	29 f7       	brne	.-54     	; 0xda0 <__vector_11+0x2d6>
 dd6:	90 31       	cpi	r25, 0x10	; 16
 dd8:	19 f3       	breq	.-58     	; 0xda0 <__vector_11+0x2d6>
 dda:	03 c0       	rjmp	.+6      	; 0xde2 <__vector_11+0x318>
				return;
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 ddc:	81 e2       	ldi	r24, 0x21	; 33
 dde:	80 93 eb 00 	sts	0x00EB, r24
}
 de2:	ff 91       	pop	r31
 de4:	ef 91       	pop	r30
 de6:	df 91       	pop	r29
 de8:	cf 91       	pop	r28
 dea:	bf 91       	pop	r27
 dec:	af 91       	pop	r26
 dee:	9f 91       	pop	r25
 df0:	8f 91       	pop	r24
 df2:	7f 91       	pop	r23
 df4:	6f 91       	pop	r22
 df6:	5f 91       	pop	r21
 df8:	4f 91       	pop	r20
 dfa:	3f 91       	pop	r19
 dfc:	2f 91       	pop	r18
 dfe:	0f 90       	pop	r0
 e00:	0b be       	out	0x3b, r0	; 59
 e02:	0f 90       	pop	r0
 e04:	0f be       	out	0x3f, r0	; 63
 e06:	0f 90       	pop	r0
 e08:	1f 90       	pop	r1
 e0a:	18 95       	reti

00000e0c <analogRead>:

int analogRead(uint8_t pin)
{
        uint8_t low, adc;

        if (pin >= 12) return 0;
 e0c:	8c 30       	cpi	r24, 0x0C	; 12
 e0e:	18 f0       	brcs	.+6      	; 0xe16 <analogRead+0xa>
 e10:	20 e0       	ldi	r18, 0x00	; 0
 e12:	30 e0       	ldi	r19, 0x00	; 0
 e14:	3e c0       	rjmp	.+124    	; 0xe92 <analogRead+0x86>
        adc = pgm_read_byte(adc_mapping + pin);
 e16:	e8 2f       	mov	r30, r24
 e18:	f0 e0       	ldi	r31, 0x00	; 0
 e1a:	e1 50       	subi	r30, 0x01	; 1
 e1c:	fe 4f       	sbci	r31, 0xFE	; 254
 e1e:	34 91       	lpm	r19, Z+
 e20:	40 91 00 01 	lds	r20, 0x0100
        if (adc < 8) {
 e24:	38 30       	cpi	r19, 0x08	; 8
 e26:	80 f4       	brcc	.+32     	; 0xe48 <analogRead+0x3c>
                DIDR0 |= (1 << adc);
 e28:	20 91 7e 00 	lds	r18, 0x007E
 e2c:	81 e0       	ldi	r24, 0x01	; 1
 e2e:	90 e0       	ldi	r25, 0x00	; 0
 e30:	03 2e       	mov	r0, r19
 e32:	02 c0       	rjmp	.+4      	; 0xe38 <analogRead+0x2c>
 e34:	88 0f       	add	r24, r24
 e36:	99 1f       	adc	r25, r25
 e38:	0a 94       	dec	r0
 e3a:	e2 f7       	brpl	.-8      	; 0xe34 <analogRead+0x28>
 e3c:	28 2b       	or	r18, r24
 e3e:	20 93 7e 00 	sts	0x007E, r18
                ADCSRB = 0;
 e42:	10 92 7b 00 	sts	0x007B, r1
 e46:	11 c0       	rjmp	.+34     	; 0xe6a <analogRead+0x5e>
                ADMUX = analog_reference_config_val | adc;
        } else {
                adc -= 8;
 e48:	38 50       	subi	r19, 0x08	; 8
                DIDR2 |= (1 << adc);
 e4a:	20 91 7d 00 	lds	r18, 0x007D
 e4e:	81 e0       	ldi	r24, 0x01	; 1
 e50:	90 e0       	ldi	r25, 0x00	; 0
 e52:	03 2e       	mov	r0, r19
 e54:	02 c0       	rjmp	.+4      	; 0xe5a <analogRead+0x4e>
 e56:	88 0f       	add	r24, r24
 e58:	99 1f       	adc	r25, r25
 e5a:	0a 94       	dec	r0
 e5c:	e2 f7       	brpl	.-8      	; 0xe56 <analogRead+0x4a>
 e5e:	28 2b       	or	r18, r24
 e60:	20 93 7d 00 	sts	0x007D, r18
                ADCSRB = (1<<MUX5);
 e64:	80 e2       	ldi	r24, 0x20	; 32
 e66:	80 93 7b 00 	sts	0x007B, r24
                ADMUX = analog_reference_config_val | adc;
 e6a:	34 2b       	or	r19, r20
 e6c:	30 93 7c 00 	sts	0x007C, r19
        }
	ADCSRA = (1<<ADSC)|(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 e70:	87 ec       	ldi	r24, 0xC7	; 199
 e72:	80 93 7a 00 	sts	0x007A, r24
        while (ADCSRA & (1<<ADSC)) ;
 e76:	80 91 7a 00 	lds	r24, 0x007A
 e7a:	86 fd       	sbrc	r24, 6
 e7c:	fc cf       	rjmp	.-8      	; 0xe76 <analogRead+0x6a>
        low = ADCL;
 e7e:	30 91 78 00 	lds	r19, 0x0078
        return (ADCH << 8) | low;
 e82:	20 91 79 00 	lds	r18, 0x0079
 e86:	92 2f       	mov	r25, r18
 e88:	80 e0       	ldi	r24, 0x00	; 0
 e8a:	23 2f       	mov	r18, r19
 e8c:	30 e0       	ldi	r19, 0x00	; 0
 e8e:	28 2b       	or	r18, r24
 e90:	39 2b       	or	r19, r25
}
 e92:	c9 01       	movw	r24, r18
 e94:	08 95       	ret

00000e96 <phex1>:
		usb_debug_putchar(c);
	}
}

void phex1(unsigned char c)
{
 e96:	98 2f       	mov	r25, r24
	usb_debug_putchar(c + ((c < 10) ? '0' : 'A' - 10));
 e98:	8a 30       	cpi	r24, 0x0A	; 10
 e9a:	10 f0       	brcs	.+4      	; 0xea0 <phex1+0xa>
 e9c:	87 e3       	ldi	r24, 0x37	; 55
 e9e:	01 c0       	rjmp	.+2      	; 0xea2 <phex1+0xc>
 ea0:	80 e3       	ldi	r24, 0x30	; 48
 ea2:	89 0f       	add	r24, r25
}
 ea4:	7e cd       	rjmp	.-1284   	; 0x9a2 <usb_debug_putchar>

00000ea6 <phex>:

void phex(unsigned char c)
{
 ea6:	1f 93       	push	r17
 ea8:	18 2f       	mov	r17, r24
	phex1(c >> 4);
 eaa:	82 95       	swap	r24
 eac:	8f 70       	andi	r24, 0x0F	; 15
 eae:	f3 df       	rcall	.-26     	; 0xe96 <phex1>
	phex1(c & 15);
 eb0:	81 2f       	mov	r24, r17
 eb2:	8f 70       	andi	r24, 0x0F	; 15
 eb4:	f0 df       	rcall	.-32     	; 0xe96 <phex1>
}
 eb6:	1f 91       	pop	r17
 eb8:	08 95       	ret

00000eba <phex16>:

void phex16(unsigned int i)
{
 eba:	1f 93       	push	r17
 ebc:	18 2f       	mov	r17, r24
	phex(i >> 8);
 ebe:	89 2f       	mov	r24, r25
 ec0:	f2 df       	rcall	.-28     	; 0xea6 <phex>
	phex(i);
 ec2:	81 2f       	mov	r24, r17
 ec4:	f0 df       	rcall	.-32     	; 0xea6 <phex>
}
 ec6:	1f 91       	pop	r17
 ec8:	08 95       	ret

00000eca <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 eca:	1f 93       	push	r17
 ecc:	cf 93       	push	r28
 ece:	df 93       	push	r29
 ed0:	ec 01       	movw	r28, r24
 ed2:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 ed4:	21 96       	adiw	r28, 0x01	; 1
 ed6:	14 91       	lpm	r17, Z+
		if (!c) break;
 ed8:	11 23       	and	r17, r17
 eda:	39 f0       	breq	.+14     	; 0xeea <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 edc:	1a 30       	cpi	r17, 0x0A	; 10
 ede:	11 f4       	brne	.+4      	; 0xee4 <print_P+0x1a>
 ee0:	8d e0       	ldi	r24, 0x0D	; 13
 ee2:	5f dd       	rcall	.-1346   	; 0x9a2 <usb_debug_putchar>
		usb_debug_putchar(c);
 ee4:	81 2f       	mov	r24, r17
 ee6:	5d dd       	rcall	.-1350   	; 0x9a2 <usb_debug_putchar>
 ee8:	f4 cf       	rjmp	.-24     	; 0xed2 <print_P+0x8>
	}
}
 eea:	df 91       	pop	r29
 eec:	cf 91       	pop	r28
 eee:	1f 91       	pop	r17
 ef0:	08 95       	ret

00000ef2 <_exit>:
 ef2:	f8 94       	cli

00000ef4 <__stop_program>:
 ef4:	ff cf       	rjmp	.-2      	; 0xef4 <__stop_program>
